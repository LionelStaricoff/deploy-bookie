{
  "src": {
    "main": {
      "java": {
        "com": {
          "Bookie": {
            "BookieApplication.java": "package com.Bookie;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.scheduling.annotation.EnableScheduling;\r\n\r\n@SpringBootApplication\r\npublic class BookieApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(BookieApplication.class, args);\r\n\t}\r\n\r\n}\r\n",
            "config": {
              "repository": {
                "ChapterRepository.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.ChapterEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ChapterRepository extends JpaRepository<ChapterEntity, Long> {\r\n    List<ChapterEntity> findByHistoryId(Long historyId);\r\n}\r\n",
                "CountryRepository.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.CountryEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\npublic interface CountryRepository extends JpaRepository<CountryEntity,Long> {\r\n\r\n    @Query(\"SELECT c FROM CountryEntity c WHERE c.name = :name\")\r\n    CountryEntity findByName(@Param(\"name\") String name);\r\n}\r\n",
                "HistoryRepository.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\npublic interface HistoryRepository extends JpaRepository<HistoryEntity, Long> {\r\n\r\n   List<HistoryEntity> findByCreator(UserEntity userId);\r\n}\r\n",
                "ProvinceRepository.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.ProvinceEntity;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface ProvinceRepository extends JpaRepository<ProvinceEntity,Long> {\r\n    ProvinceEntity findByName(@NotBlank String probince);\r\n}\r\n",
                "ReaderRepository.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.ReaderEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\npublic interface ReaderRepository extends JpaRepository<ReaderEntity,Long> {\r\n    @Query(\"\"\"\r\n        SELECT r FROM ReaderEntity r WHERE r.userId = :user_id AND r.historyId = :history_id\r\n        \"\"\")\r\n    ReaderEntity findByUserIdAndHistoryId(@Param(\"user_id\") UserEntity user_id, @Param(\"history_id\") HistoryEntity history_id);\r\n\r\n}\r\n",
                "UserRepository.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.UserEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\r\n    Optional<UserEntity> findByEmail(String email);\r\n\r\n    Optional<UserEntity> findByAuth0UserId(String auth0UserId);\r\n}\r\n",
                "WishlistRepositoty.java": "package com.Bookie.config.repository;\r\n\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.entities.WishlistEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\npublic interface WishlistRepositoty extends JpaRepository<WishlistEntity, Long> {\r\n\r\n    @Query(\"\"\"\r\n            SELECT w FROM WishlistEntity w WHERE w.user = :user AND w.history = :history\r\n            \"\"\")\r\n    WishlistEntity findByUserAndHistory(@Param(\"user\") UserEntity user, @Param(\"history\") HistoryEntity history);\r\n\r\n\r\n    }"
              },
              "SecurityConfig.java": "package com.Bookie.config;\r\n\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Value(\"${auth0.jwk-set-uri}\")\r\n    private String jwkSetUri;\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n                .csrf(csrf -> csrf.disable())  // Deshabilita CSRF para APIs\r\n                .authorizeHttpRequests(authorize -> authorize\r\n                        .requestMatchers(\"/v3/api-docs/**\",\r\n                                \"/swagger-ui/**\",\r\n                                \"/swagger-ui.html\",\r\n                                \"/v2/api-docs\",\r\n                                \"/configuration/ui\",\r\n                                \"/swagger-resources/**\",\r\n                                \"/configuration/security\",\r\n                                \"/webjars/**\",\r\n                                \"/api/webhooks/auth0/user-created\").permitAll()\r\n                        .requestMatchers(\"/api/public\").permitAll()  // Permite acceso sin autenticación a la ruta pública\r\n                                .anyRequest().permitAll()\r\n                        // .anyRequest().authenticated()  // Requiere autenticación para todas las demás rutas\r\n                )\r\n                .oauth2ResourceServer(oauth2 -> oauth2\r\n                        .jwt(Customizer.withDefaults())  // Configura JWT como el tipo de autenticación para el recurso\r\n                );\r\n\r\n        return http.build();\r\n    }\r\n\r\n\r\n    @Bean\r\n    public JwtDecoder jwtDecoder() {\r\n        return NimbusJwtDecoder.withJwkSetUri(jwkSetUri).build();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"
            },
            "Controllers": {
              "Auth0WebhookController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.service.UserService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/webhooks/auth0\")\r\n@CrossOrigin(\"*\")\r\npublic class Auth0WebhookController {\r\n\r\n    private final UserService userService;\r\n\r\n    @Autowired\r\n    public Auth0WebhookController(UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @PostMapping(value = \"/user-created\",consumes = MediaType.APPLICATION_JSON_VALUE)\r\n    public ResponseEntity<String> handleUserCreated(@RequestBody Map<String, Object> userData) {\r\n        String auth0UserId = userData.get(\"user_id\").toString();\r\n        String email = userData.get(\"email\").toString();\r\n        String name = userData.containsKey(\"name\") ? userData.get(\"name\").toString() : \"Unnamed User\";\r\n\r\n        // Sincroniza con la base de datos\r\n        userService.saveUser(auth0UserId, email, name);\r\n\r\n        return ResponseEntity.ok(\"User synchronized successfully.\");\r\n    }\r\n}\r\n",
              "ChapterController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.ChapterDtoRequest;\r\nimport com.Bookie.dto.ChapterDtoResponse;\r\nimport com.Bookie.dto.ChapterDtoUpdateRequest;\r\nimport com.Bookie.service.ChapterService;\r\nimport jakarta.validation.Valid;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v1/chapters\")\r\n@CrossOrigin(\"*\")\r\npublic class ChapterController {\r\n\r\n    private final ChapterService chapterService;\r\n\r\n    public ChapterController(ChapterService chapterService) {\r\n        this.chapterService = chapterService;\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<ChapterDtoResponse> createChapter(@RequestBody @Valid ChapterDtoRequest chapterDto) {\r\n        ChapterDtoResponse response = chapterService.createChapter(chapterDto);\r\n        return ResponseEntity.status(201).body(response);\r\n    }\r\n\r\n    @GetMapping(\"/history/{historyId}\")\r\n    public ResponseEntity<List<ChapterDtoResponse>> getChaptersByHistory(@PathVariable Long historyId) {\r\n        List<ChapterDtoResponse> chapters = chapterService.getChaptersByHistoryId(historyId);\r\n        return ResponseEntity.ok(chapters);\r\n    }\r\n\r\n    @PutMapping(\"/{chapterId}\")\r\n    public ResponseEntity<ChapterDtoResponse> updateChapter(\r\n            @PathVariable Long chapterId,\r\n            @RequestBody @Valid ChapterDtoUpdateRequest updateRequest) {\r\n        ChapterDtoResponse response = chapterService.updateChapter(chapterId, updateRequest);\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n    @DeleteMapping(\"/{chapterId}\")\r\n    public ResponseEntity<String> deleteChapter(@PathVariable Long chapterId) {\r\n        String message = chapterService.deleteChapter(chapterId);\r\n        return ResponseEntity.ok(message);\r\n    }\r\n}\r\n",
              "CountryController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.CountryResponseDto;\r\nimport com.Bookie.entities.CountryEntity;\r\nimport com.Bookie.service.CountryService;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v1/countries\")\r\n@CrossOrigin(\"*\")\r\n@AllArgsConstructor\r\npublic class CountryController {\r\n\r\n    private final CountryService countryService;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<CountryResponseDto>> getAllCountriesWithProvinces() {\r\n        List<CountryResponseDto> countries = countryService.getAllCountriesWithProvinces();\r\n        return ResponseEntity.ok(countries);\r\n    }\r\n}\r\n",
              "GenreController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.CrossOrigin;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"api/v1/genre\")\r\n@CrossOrigin(\"*\")\r\n@AllArgsConstructor\r\npublic class GenreController {\r\n\r\n    @GetMapping\r\n    @Operation(\r\n            summary = \"List all genre\",\r\n            description = \"List all registered genre literary\",\r\n            tags = {\"Genre enum\"})\r\n    public ResponseEntity getAllgenre() {\r\n\r\n        return ResponseEntity.status(HttpStatus.OK).body(GenreLiterary.getGenreList());\r\n\r\n    }\r\n}\r\n",
              "HistoryController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.HistoryDtoRequest;\r\nimport com.Bookie.dto.HistoryDtoRequestUpdate;\r\nimport com.Bookie.dto.HistoryDtoResponse;\r\nimport com.Bookie.service.HistoryService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport jakarta.validation.Valid;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"api/v1/history\")\r\n@CrossOrigin(\"*\")\r\n@AllArgsConstructor\r\npublic class HistoryController {\r\n\r\n    private final HistoryService historyService;\r\n\r\n\r\n    @PostMapping\r\n    @Operation(\r\n            summary = \"Create a history\",\r\n            description = \"Create a new history\",\r\n            tags = {\"History\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"201\", description = \"History created successfully\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = HistoryDtoRequest.class),\r\n                            examples = @ExampleObject(name = \"HistoryDtoRequest\",\r\n                                    value = \"{\\\"id\\\": 1,\\\"title\\\": \\\"new title\\\", \\\"synopsis\\\": \\\"description of history\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber\\\",\\\"country\\\": \\\"ARGENTINA\\\",\\\"province\\\": \\\"BUENOS AIRES\\\"}\")))\r\n    })\r\n    public ResponseEntity<?> crateHistory(@RequestBody @Valid HistoryDtoRequest historyDto) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.CREATED).body(historyService.createHistory(historyDto));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n    @PutMapping(\"/{id}\")\r\n    @Operation(\r\n            summary = \"Update history\",\r\n            description = \"Updating history data\",\r\n            tags = {\"History\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"History created successfully\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = HistoryDtoRequestUpdate.class),\r\n                            examples = @ExampleObject(name = \"HistoryDtoRequestUpdate\",\r\n                                    value = \"{\\\"id\\\": 1,\\\"title\\\": \\\"new title\\\", \\\"synopsis\\\": \\\"description of history\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber\\\"}\")))\r\n    })\r\n    public ResponseEntity<?> updateHistory(@RequestBody @Valid HistoryDtoRequestUpdate historyDto, @PathVariable  Long id) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.OK).body(historyService.updateHistory(historyDto,id));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    @Operation(\r\n            summary = \"Delete history\",\r\n            description = \"Deleting stories and their chapters\",\r\n            tags = {\"History\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"202\", description = \"History delete successfully\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE) )})\r\n    public ResponseEntity<?> deleteHistory(@PathVariable  Long id) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.ACCEPTED).body(historyService.deleteHistory(id));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n    @PatchMapping(\"/{id}\")\r\n    @Operation(\r\n            summary = \"publish history\",\r\n            description = \"publishing  the story so they can read it\",\r\n            tags = {\"History\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"202\", description = \"Publication of the history successfully\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = HistoryDtoResponse.class),\r\n                            examples = @ExampleObject(name = \"HistoryDtoResponse\",\r\n                                    value = \"{\\\"id\\\": 1,\\\"title\\\": \\\"new title\\\", \\\"synopsis\\\": \\\"description of history\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber\\\"}\")))\r\n    })\r\n    public ResponseEntity<?> publishHistory(@PathVariable  Long id) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.ACCEPTED).body(historyService.publishHistory(id));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @GetMapping(\"/{id}\")\r\n    @Operation(\r\n            summary = \"Get history\",\r\n            description = \"Get Stories by ID\",\r\n            tags = {\"History\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"obtener historias por id y sus capitulos\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = HistoryDtoResponse.class),\r\n                            examples = @ExampleObject(name = \"HistoryDtoResponse\",\r\n                                    value = \"{\\\"id\\\": 1,\\\"title\\\": \\\"new title\\\", \\\"synopsis\\\": \\\"description of history\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber\\\"}\")))\r\n    })\r\n    public ResponseEntity<?> gethHistory(@PathVariable  Long id) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.OK).body(historyService.getHistory(id));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n    @GetMapping(\"/user/{user_id}\")\r\n    @Operation(\r\n            summary = \"Get history\",\r\n            description = \"Get Stories by ID\",\r\n            tags = {\"History\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"obtener historias por id y sus capitulos\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = HistoryDtoResponse.class),\r\n                            examples = @ExampleObject(name = \"HistoryDtoResponse\",\r\n                                    value = \"{\\\"id\\\": 1,\\\"title\\\": \\\"new title\\\", \\\"synopsis\\\": \\\"description of history\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber\\\"}\")))\r\n    })\r\n    public ResponseEntity<?> gethHistoryByUser(@PathVariable  Long user_id) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.OK).body(historyService.getHistoryByUserId(user_id));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n    @GetMapping(\"/all\")\r\n    @Operation(\r\n            summary = \"List all histories\",\r\n            description = \"List all registered histories\",\r\n            tags = {\"History\"}\r\n    )\r\n    public ResponseEntity<?> getAllHistoties() {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.OK).body(historyService.getAll());\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n}\r\n",
              "ReaderController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.ReaderCreateRequest;\r\nimport com.Bookie.dto.WishlistRequestCreate;\r\nimport com.Bookie.service.ReaderService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport jakarta.validation.Valid;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"api/vi/reader\")\r\n@CrossOrigin(\"*\")\r\n@AllArgsConstructor\r\npublic class ReaderController {\r\n\r\n    private final ReaderService readerService;\r\n\r\n    @PostMapping\r\n    @Operation(\r\n            summary = \"Create a reader\",\r\n            description = \"Create a new ReaderEntity\",\r\n            tags = {\"Reader\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"201\", description = \"Creating a new reading of a story\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = WishlistRequestCreate.class),\r\n                            examples = @ExampleObject(name = \"HistoryDtoRequest\",\r\n                                    value =  \"{\\\"body\\\" : {\\\"id\\\" : 22, \\\"userID\\\" : {\\\"id\\\" : 1, \\\"name\\\" : \\\"Osecactest\\\", \\\"email\\\" : \\\"falsa 123\\\", \\\"auth0UserId\\\" : \\\"3265874\\\"}, \\\"historyID\\\" : {\\\"id\\\" : 74, \\\"title\\\" : \\\"La leyenda del MAGO 2\\\", \\\"syopsis\\\" : \\\"Una aventura épica sobre un MAGO y su MAGIA divivna.\\\", \\\"publish\\\" : false, \\\"genre\\\" : \\\"FANTASIA\\\", \\\"img\\\" : \\\"http://imagen-del-dragon.jpg/\\\"}}}\"\r\n\r\n                            )))\r\n    })\r\n    public ResponseEntity<?> createReader (@RequestBody @Valid ReaderCreateRequest readerCreateRequest){\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.CREATED).body(readerService.createReaer(readerCreateRequest));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n}\r\n",
              "UserController.java": "package com.Bookie.Controllers;\r\n\r\n\r\nimport com.Bookie.dto.HistoryDtoResponse;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.service.UserService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/auth\")\r\n@CrossOrigin(\"*\")\r\npublic class UserController {\r\n\r\n    private final UserService userService;\r\n\r\n    @Autowired\r\n    public UserController(UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    //este endpoint esta en duda...\r\n    @GetMapping(\"/api/auth/sync\")\r\n    public ResponseEntity<String> getSyncInfo(Authentication authentication) {\r\n        JwtAuthenticationToken jwtToken = (JwtAuthenticationToken) authentication;\r\n        String userName = jwtToken.getName(); // O cualquier información que necesites\r\n        return ResponseEntity.ok(\"Authenticated user: \" + userName);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param authentication\r\n     * @return\r\n     */\r\n    @GetMapping(\"/sync\")\r\n    public ResponseEntity<Map<String, Object>> getSyncInfo2(Authentication authentication) {\r\n        JwtAuthenticationToken jwtToken = (JwtAuthenticationToken) authentication;\r\n        Map<String, Object> tokenAttributes = jwtToken.getTokenAttributes();\r\n\r\n\r\n        Map<String, Object> response = new HashMap<>();\r\n        response.put(\"user_id\", tokenAttributes.get(\"sub\")); // Identificador del usuario\r\n        response.put(\"email\", tokenAttributes.get(\"email\")); // Email del usuario\r\n        response.put(\"name\", tokenAttributes.get(\"name\"));   // Nombre del usuario\r\n        response.put(\"roles\", tokenAttributes.get(\"roles\")); // Roles (si están configurados en el token)\r\n        response.put(\"custom_claims\", tokenAttributes);      // Agrega todos los atributos si deseas verlos\r\n\r\n        return ResponseEntity.ok(response);\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     *\r\n     *\r\n     * @param authentication\r\n     * @return\r\n     */\r\n    //IMPORTANTE este metodo despues abria que quitarlo o hacerlo solo para administrador!\r\n    @GetMapping(\"/users\")\r\n    public ResponseEntity<List<UserEntity>> getAllUsers(Authentication authentication) {\r\n        List<UserEntity> users = userService.getAllUsers();\r\n        return ResponseEntity.ok(users);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param authentication\r\n     * @return\r\n     */\r\n\r\n    @Operation(\r\n            summary = \"get user\",\r\n            description = \"get a user from postgresql from a token\",\r\n            tags = {\"User\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"Get user Succesfully\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Authentication.class),\r\n                            examples = @ExampleObject(name = \"history\",\r\n                                    value = \"{\\\"id\\\": 1,\\\"name\\\": \\\"Jorge\\\", \\\"email\\\": \\\"test@test.com\\\", \\\"auth0UserId\\\": google-oauth2|123456789\\\"}\")))\r\n    })\r\n    @GetMapping(\"/user\")\r\n    public ResponseEntity<UserEntity> getAuthenticatedUser(Authentication authentication) {\r\n        JwtAuthenticationToken jwtToken = (JwtAuthenticationToken) authentication;\r\n        String auth0UserId = jwtToken.getTokenAttributes().get(\"sub\").toString();\r\n\r\n        UserEntity user = userService.getUserByAuth0Id(auth0UserId);\r\n\r\n        if (user != null) {\r\n            return ResponseEntity.ok(user);\r\n        } else {\r\n            return ResponseEntity.notFound().build();\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n",
              "WishlistController.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.HistoryDtoRequest;\r\nimport com.Bookie.dto.HistoryDtoResponse;\r\nimport com.Bookie.dto.WishlistRequestCreate;\r\nimport com.Bookie.service.WishlistService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport jakarta.validation.Valid;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/v1/wishlist\")\r\n@CrossOrigin(\"*\")\r\n@AllArgsConstructor\r\npublic class WishlistController {\r\n\r\n    private WishlistService wishlistService;\r\n\r\n\r\n\r\n    @PostMapping\r\n    @Operation(\r\n            summary = \"Create a wishlist\",\r\n            description = \"Create a new WishlistEntity\",\r\n            tags = {\"Wishlist\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"201\", description = \"Wishlist created successfully\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = WishlistRequestCreate.class),\r\n                            examples = @ExampleObject(name = \"WishlistRequestCreate\",\r\n                                    value =  \"{\\\"body\\\" : {\\\"id\\\" : 22, \\\"userID\\\" : {\\\"id\\\" : 1, \\\"name\\\" : \\\"Osecactest\\\", \\\"email\\\" : \\\"falsa 123\\\", \\\"auth0UserId\\\" : \\\"3265874\\\"}, \\\"historyID\\\" : {\\\"id\\\" : 74, \\\"title\\\" : \\\"La leyenda del MAGO 2\\\", \\\"syopsis\\\" : \\\"Una aventura épica sobre un MAGO y su MAGIA divivna.\\\", \\\"publish\\\" : false, \\\"genre\\\" : \\\"FANTASIA\\\", \\\"img\\\" : \\\"http://imagen-del-dragon.jpg/\\\"}}}\"\r\n\r\n                            )))\r\n    })\r\n    public ResponseEntity<?> crateWishlist(@RequestBody @Valid WishlistRequestCreate wishlist) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.CREATED).body(wishlistService.createHistory(wishlist));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(\"error\", ex.getMessage()));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @GetMapping(\"/{id}\")\r\n    @Operation(\r\n            summary = \"Get wishlist\",\r\n            description = \"Get wishlist by ID\",\r\n            tags = {\"Wishlist\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"Obtener historias de la lista de deseos\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(),\r\n                            examples = @ExampleObject(name = \"HistoryDtoResponse\",\r\n                                    value = \"List<History>: { { \\\"id\\\": 1,\\\"title\\\": \\\"new title\\\", \\\"synopsis\\\": \\\"description of history\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber\\\",\\\"country\\\": \\\"ARGENTINA\\\",\\\"province\\\": \\\"BUENOS AIRES\\\"}, { \\\"id\\\": 2,\\\"title\\\": \\\"new title2\\\", \\\"synopsis\\\": \\\"description of history 2\\\", \\\"creator_id\\\": 1,\\\"genre\\\": \\\"NOVEL\\\",\\\"img\\\": \\\"Base64:veryletterandnumber 2\\\",\\\"country\\\": \\\"ARGENTINA\\\",\\\"province\\\": \\\"BUENOS AIRES\\\"} }\")))\r\n    })\r\n    public ResponseEntity<?> getWishlist(@PathVariable Long id) {\r\n        try {\r\n            return ResponseEntity.status(HttpStatus.OK).body(wishlistService.getWishlist(id));\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of(\"error\", ex.getMessage()));\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    @Operation(\r\n            summary = \"delete a history from wishlist\",\r\n            description = \"remove stories from the wishlist by id\",\r\n            tags = {\"Wishlist\"}\r\n    )\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"202\", description = \"ACCEPTED\",\r\n                    content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE))\r\n    })\r\n    public ResponseEntity<?> deleteHistoryWishlist(@PathVariable Long id) {\r\n        try {\r\n            wishlistService.deleteWishlist(id);\r\n            return ResponseEntity.status(HttpStatus.ACCEPTED).build();\r\n        } catch (Exception ex) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of(\"error\", ex.getMessage()));\r\n\r\n        }\r\n    }\r\n}\r\n"
            },
            "dto": {
              "ChapterDtoRequest.java": "package com.Bookie.dto;\r\n\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record ChapterDtoRequest(\r\n        @NotBlank String title,\r\n        @NotBlank String content,\r\n        @NotNull Double latitude,\r\n        @NotNull Double longitude,\r\n        @NotNull Long historyId\r\n) {\r\n}\r\n",
              "ChapterDtoResponse.java": "package com.Bookie.dto;\r\n\r\nimport com.Bookie.entities.ChapterEntity;\r\n\r\npublic record ChapterDtoResponse(\r\n        Long id,\r\n        String title,\r\n        String content,\r\n        Double latitude,\r\n        Double longitude,\r\n        Long historyId\r\n) {\r\n    public ChapterDtoResponse(ChapterEntity chapter) {\r\n        this(chapter.getId(), chapter.getTitle(), chapter.getContent(), chapter.getLatitude(), chapter.getLongitude(), chapter.getHistory().getId());\r\n    }\r\n}\r\n",
              "ChapterDtoUpdateRequest.java": "package com.Bookie.dto;\r\n\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record ChapterDtoUpdateRequest(\r\n        @NotBlank String title,\r\n        @NotBlank String content,\r\n        @NotNull Double latitude,\r\n        @NotNull Double longitude\r\n) {\r\n}\r\n",
              "CountryResponseDto.java": "package com.Bookie.dto;\r\n\r\nimport java.util.List;\r\n\r\npublic record CountryResponseDto(\r\n        Long id,\r\n        String name,\r\n        List<ProvinceResponseDto> provinces\r\n) {\r\n}\r\n",
              "HistoryDtoRequest.java": "package com.Bookie.dto;\r\n\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record HistoryDtoRequest(\r\n        @NotBlank\r\n        String title,\r\n        @NotBlank\r\n        String synopsis,\r\n        @NotNull\r\n        Long creator_id,\r\n        @NotNull\r\n        GenreLiterary genre,\r\n        String img,\r\n        @NotBlank\r\n        String country,\r\n        @NotBlank\r\n        String province\r\n) {\r\n}\r\n",
              "HistoryDtoRequestUpdate.java": "package com.Bookie.dto;\r\n\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record HistoryDtoRequestUpdate(\r\n\r\n        String title,\r\n\r\n        String synopsis,\r\n\r\n        GenreLiterary genre,\r\n        String img\r\n\r\n) {\r\n\r\n}\r\n",
              "HistoryDtoResponse.java": "package com.Bookie.dto;\r\n\r\nimport com.Bookie.entities.ChapterEntity;\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\nimport java.util.List;\r\n\r\npublic record HistoryDtoResponse(\r\n        @NotBlank\r\n        Long id,\r\n        @NotBlank\r\n        String title,\r\n        @NotBlank\r\n        String syopsis,\r\n        @NotNull\r\n        UserEntity creator_id,\r\n        @NotNull\r\n        GenreLiterary genre,\r\n        String img,\r\n        boolean publish,\r\n        @NotBlank\r\n        String country,\r\n        @NotBlank\r\n        String province,\r\n        List<ChapterEntity> chapters\r\n) {\r\n        public HistoryDtoResponse(HistoryEntity historyEntity){\r\n                this(historyEntity.getId(),historyEntity.getTitle(),historyEntity.getSyopsis(),historyEntity.getCreator(),\r\n                        historyEntity.getGenre(),historyEntity.getImg(),historyEntity.getPublish(),\r\n                        historyEntity.getProvince().getCountry().getName(),historyEntity.getProvince().getName(),historyEntity.getChapters());\r\n        }\r\n}\r\n",
              "ProvinceResponseDto.java": "package com.Bookie.dto;\r\n\r\npublic record ProvinceResponseDto(\r\n        Long id,\r\n        String name\r\n) {\r\n}\r\n",
              "ReaderCreateRequest.java": "package com.Bookie.dto;\r\n\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record ReaderCreateRequest(\r\n        @NotNull\r\n        Long user_id,\r\n        @NotNull\r\n        Long history_id\r\n) {\r\n}\r\n",
              "ReaderRequest.java": "package com.Bookie.dto;\r\n\r\nimport com.Bookie.entities.ChapterEntity;\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.ReaderEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\nimport java.util.List;\r\n\r\npublic record ReaderRequest(\r\n        @NotNull\r\n        Long id,\r\n        @NotNull\r\n        UserEntity user,\r\n        @NotNull\r\n        HistoryEntity history,\r\n        @NotBlank\r\n        Boolean complete,\r\n        List<ChapterEntity> chapters\r\n) {\r\n        public ReaderRequest(ReaderEntity reader) {\r\n                this(reader.getId(),reader.getUserId(),reader.getHistoryId(),reader.getComplete(),null);\r\n        }\r\n}\r\n",
              "WishlistRequestCreate.java": "package com.Bookie.dto;\r\n\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record WishlistRequestCreate(@NotNull Long userID, @NotNull Long historyID) {\r\n}\r\n",
              "WishlistResponseCreate.java": "package com.Bookie.dto;\r\n\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.entities.WishlistEntity;\r\nimport jakarta.validation.constraints.NotNull;\r\n\r\npublic record WishlistResponseCreate(@NotNull Long id, @NotNull UserEntity userID, @NotNull HistoryEntity historyID) {\r\n\r\n    public WishlistResponseCreate(WishlistEntity wishlist){\r\n        this(wishlist.getId(),wishlist.getUser(),wishlist.getHistory());\r\n    }\r\n}\r\n"
            },
            "entities": {
              "ChapterEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity\r\n@Table(name = \"chapter\")\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(of = \"id\")\r\npublic class ChapterEntity {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column(nullable = false)\r\n    private String title;\r\n\r\n    @Column(columnDefinition = \"TEXT\", nullable = false)\r\n    private String content;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"history_id\", nullable = false)\r\n    @JsonIgnore\r\n    private HistoryEntity history;\r\n\r\n    @Column(nullable = false)\r\n    private Double latitude;\r\n\r\n    @Column(nullable = false)\r\n    private Double longitude;\r\n}\r\n",
              "CountryEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity(name = \"CountryEntity\")\r\n@Table(name = \"country\")\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(of = \"id\")\r\npublic class CountryEntity {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column(name = \"name\",unique = true)\r\n    private String name;\r\n\r\n\r\n    @OneToMany(mappedBy = \"country\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<ProvinceEntity> provinces = new ArrayList<>();\r\n\r\n\r\n\r\n    public CountryEntity(String country) {\r\n        this.name = country;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"CountryEntity{id=\" + id + \", name='\" + name + \"'}\";\r\n    }\r\n}",
              "HistoryEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.util.List;\r\n\r\n@Entity(name = \"HistoryEntity\")\r\n@Table(name = \"history\")\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(of = \"id\")\r\npublic class HistoryEntity {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column(name = \"title\")\r\n    private String title;\r\n    @Column(name = \"syopsis\")\r\n    private String syopsis;\r\n    @Column(name = \"publish\")\r\n    private Boolean publish = false;\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_entity_id\")\r\n    @JsonIgnore\r\n    private UserEntity creator;\r\n    @Enumerated(EnumType.STRING)\r\n    @Column(name = \"genre\")\r\n    private GenreLiterary genre;\r\n    @Column(name = \"img\", columnDefinition = \"text\", length = 1000)\r\n    private String img;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"province_entity_id\", referencedColumnName = \"id\")\r\n    @JsonIgnore\r\n    private ProvinceEntity province;\r\n\r\n    @OneToMany(mappedBy = \"history\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<WishlistEntity> wishlishistory;\r\n\r\n    @OneToMany(mappedBy = \"history\", cascade = CascadeType.ALL,orphanRemoval = true,fetch = FetchType.LAZY)\r\n    private List<ChapterEntity> chapters;\r\n\r\n\r\n    @OneToMany(mappedBy = \"historyId\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<ReaderEntity> raider;\r\n\r\n}\r\n",
              "ProvinceEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Entity(name = \"ProvinceEntity\")\r\n@Table(name = \"Province\")\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(of = \"id\")\r\npublic class\r\nProvinceEntity {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column(name = \"name\",unique = true)\r\n    private String name;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"CountryEntity_id\")\r\n    @JsonIgnore\r\n    private CountryEntity country;\r\n\r\n    @OneToMany(mappedBy = \"province\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<HistoryEntity> histories = new ArrayList<>();\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"ProvinceEntity{id=\" + id + \", name='\" + name + \"', country=\" + country.getName() + \"}\";\r\n    }\r\n}",
              "ReaderEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity(name = \"ReaderEntity\")\r\n@Table(name = \"reader\")\r\n@Builder\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(of = \"id\")\r\npublic class ReaderEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\r\n    private Long id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\",  referencedColumnName = \"id\")\r\n    @JsonIgnore\r\n    private UserEntity userId;\r\n    @ManyToOne\r\n    @JoinColumn(name = \"history_id\",  referencedColumnName = \"id\")\r\n    @JsonIgnore\r\n    private HistoryEntity historyId;\r\n\r\n    private Boolean complete;\r\n\r\n    public ReaderEntity(UserEntity user, HistoryEntity history) {\r\n        this.userId = user;\r\n        this.historyId = history;\r\n        this.complete = true;\r\n    }\r\n}\r\n",
              "UserEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Data\r\n@Entity\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class UserEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @Column(unique = true, nullable = false)\r\n    private String email;\r\n\r\n\r\n    private String auth0UserId;\r\n\r\n    @OneToMany(mappedBy = \"creator\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<HistoryEntity> histories = new ArrayList<>();\r\n\r\n    @OneToMany(mappedBy = \"user\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<WishlistEntity> wishlishistory = new ArrayList<>();\r\n\r\n\r\n   @ManyToMany(fetch = FetchType.LAZY)\r\n    @JoinTable(name = \"wishlist\",\r\n            joinColumns = @JoinColumn(name = \"id_user_entity\"),\r\n            inverseJoinColumns = @JoinColumn(name = \"id_history\")\r\n    )\r\n    private List<HistoryEntity> wishlist = new ArrayList<>();\r\n\r\n\r\n    @OneToMany(mappedBy = \"userId\", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)\r\n    @JsonIgnore\r\n    private List<ReaderEntity> raiderList = new ArrayList<>();\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"UserEntity{id=\" + id + \", name='\" + name + \"', email='\" + email + \"', auth0UserId='\" + auth0UserId + \"'}\";\r\n    }\r\n}",
              "WishlistEntity.java": "package com.Bookie.entities;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore;\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\n\r\n@Entity(name =\"WishlistEntity\")\r\n@Table(name = \"wishlist\")\r\n@Builder\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@EqualsAndHashCode(of = \"id\")\r\npublic class WishlistEntity {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\r\n    private Long id;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"id_user_entity\",  referencedColumnName = \"id\")\r\n    @JsonIgnore\r\n    private UserEntity user;\r\n    @ManyToOne\r\n    @JoinColumn(name = \"id_history\",  referencedColumnName = \"id\")\r\n    @JsonIgnore\r\n    private HistoryEntity history;\r\n\r\n\r\n}\r\n"
            },
            "enums": {
              "GenreLiterary.java": "package com.Bookie.enums;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic enum GenreLiterary {\r\n    NOVELA(\"Novel\"),\r\n    CUENTO(\"Short Story\"),\r\n    CIENCIA_FICCION(\"Science Fiction\"),\r\n    FANTASIA(\"Fantasy\"),\r\n    ROMANCE(\"Romance\"),\r\n    MISTERIO(\"Mystery\"),\r\n    SUSPENSO(\"Thriller\"),\r\n    TERROR(\"Horror\"),\r\n    HISTORICO(\"Historical Fiction\"),\r\n    DISTOPICO(\"Dystopian\"),\r\n    UTOPIA(\"Utopian\"),\r\n    WESTERN(\"Western\"),\r\n    GOTICO(\"Gothic\"),\r\n    EPICO(\"Epic\"),\r\n    REALISMO_MAGICO(\"Magical Realism\"),\r\n    SURREALISMO(\"Surrealism\");\r\n\r\n    private final String descripcion;\r\n\r\n    GenreLiterary(String descripcion) {\r\n\r\n        this.descripcion = descripcion;\r\n    }\r\n\r\n    public String getDescripcion() {\r\n\r\n        return descripcion;\r\n    }\r\n\r\n    public static List<GenreLiterary> getGenreList(){\r\n        return Arrays.stream(GenreLiterary.values()).toList();\r\n    }\r\n}\r\n"
            },
            "service": {
              "ChapterService.java": "package com.Bookie.service;\r\n\r\nimport com.Bookie.config.repository.ChapterRepository;\r\nimport com.Bookie.config.repository.HistoryRepository;\r\nimport com.Bookie.dto.ChapterDtoRequest;\r\nimport com.Bookie.dto.ChapterDtoResponse;\r\nimport com.Bookie.dto.ChapterDtoUpdateRequest;\r\nimport com.Bookie.entities.ChapterEntity;\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\npublic class ChapterService {\r\n\r\n    private final ChapterRepository chapterRepository;\r\n    private final HistoryRepository historyRepository;\r\n\r\n    public ChapterService(ChapterRepository chapterRepository, HistoryRepository historyRepository) {\r\n        this.chapterRepository = chapterRepository;\r\n        this.historyRepository = historyRepository;\r\n    }\r\n\r\n    public ChapterDtoResponse createChapter(ChapterDtoRequest chapterDto) {\r\n        HistoryEntity history = historyRepository.findById(chapterDto.historyId())\r\n                .orElseThrow(() -> new EntityNotFoundException(\"History not found\"));\r\n\r\n        ChapterEntity chapter = ChapterEntity.builder()\r\n                .title(chapterDto.title())\r\n                .content(chapterDto.content())\r\n                .latitude(chapterDto.latitude())\r\n                .longitude(chapterDto.longitude())\r\n                .history(history)\r\n                .build();\r\n\r\n        ChapterEntity savedChapter = chapterRepository.save(chapter);\r\n        return new ChapterDtoResponse(savedChapter);\r\n    }\r\n\r\n    public List<ChapterDtoResponse> getChaptersByHistoryId(Long historyId) {\r\n        List<ChapterEntity> chapters = chapterRepository.findByHistoryId(historyId);\r\n        return chapters.stream().map(ChapterDtoResponse::new).collect(Collectors.toList());\r\n    }\r\n\r\n    public ChapterDtoResponse updateChapter(Long chapterId, ChapterDtoUpdateRequest updateRequest) {\r\n        ChapterEntity chapter = chapterRepository.findById(chapterId)\r\n                .orElseThrow(() -> new EntityNotFoundException(\"Chapter not found\"));\r\n\r\n\r\n        chapter.setTitle(updateRequest.title());\r\n        chapter.setContent(updateRequest.content());\r\n        chapter.setLatitude(updateRequest.latitude());\r\n        chapter.setLongitude(updateRequest.longitude());\r\n\r\n\r\n        ChapterEntity updatedChapter = chapterRepository.save(chapter);\r\n\r\n        return new ChapterDtoResponse(updatedChapter);\r\n    }\r\n\r\n    public String deleteChapter(Long chapterId) {\r\n        if (!chapterRepository.existsById(chapterId)) {\r\n            throw new EntityNotFoundException(\"Chapter not found\");\r\n        }\r\n\r\n        chapterRepository.deleteById(chapterId);\r\n        return \"Chapter deleted successfully\";\r\n    }\r\n}\r\n",
              "CountryService.java": "package com.Bookie.service;\r\n\r\nimport com.Bookie.config.repository.CountryRepository;\r\nimport com.Bookie.dto.CountryResponseDto;\r\nimport com.Bookie.dto.ProvinceResponseDto;\r\nimport com.Bookie.entities.CountryEntity;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class CountryService {\r\n\r\n    private final CountryRepository countryRepository;\r\n\r\n    public List<CountryResponseDto> getAllCountriesWithProvinces() {\r\n        return countryRepository.findAll().stream()\r\n                .map(this::mapToCountryResponseDto)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    private CountryResponseDto mapToCountryResponseDto(CountryEntity country) {\r\n        return new CountryResponseDto(\r\n                country.getId(),\r\n                country.getName(),\r\n                country.getProvinces().stream()\r\n                        .map(province -> new ProvinceResponseDto(province.getId(), province.getName()))\r\n                        .collect(Collectors.toList())\r\n        );\r\n    }\r\n}",
              "HistoryService.java": "package com.Bookie.service;\r\n\r\nimport com.Bookie.config.repository.CountryRepository;\r\nimport com.Bookie.config.repository.ProvinceRepository;\r\nimport com.Bookie.dto.HistoryDtoRequest;\r\nimport com.Bookie.dto.HistoryDtoRequestUpdate;\r\nimport com.Bookie.dto.HistoryDtoResponse;\r\nimport com.Bookie.entities.CountryEntity;\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.ProvinceEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.config.repository.HistoryRepository;\r\nimport com.Bookie.config.repository.UserRepository;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport jakarta.validation.Valid;\r\nimport jakarta.validation.constraints.NotNull;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Service\r\n@Transactional\r\npublic class HistoryService {\r\n\r\n    @Autowired\r\n    private HistoryRepository historyRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private ProvinceRepository provinceRepository;\r\n\r\n    @Autowired\r\n    private CountryRepository countryRepository;\r\n\r\n    public HistoryDtoResponse createHistory(@Valid HistoryDtoRequest historyDto) {\r\n\r\n        ProvinceEntity country = getCountryEntityByProvinceEntity(historyDto);\r\n\r\n\r\n        /** <p> Buscar el usuario y guardar todo en la bbdd </p> */\r\n        Optional<UserEntity> user = userRepository.findById(historyDto.creator_id());\r\n        HistoryEntity historyEntity = HistoryEntity.builder()\r\n                .creator(user.get())\r\n                .genre(historyDto.genre())\r\n                .title(historyDto.title())\r\n                .syopsis(historyDto.synopsis())\r\n                .img(historyDto.img())\r\n                .publish(false)\r\n                .province(country)\r\n                .build();\r\n        HistoryEntity history = historyRepository.save(historyEntity);\r\n\r\n\r\n        return new HistoryDtoResponse(history);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * <p>Obtener el country por la province, si no existe lo crea</p>\r\n     */\r\n    private ProvinceEntity getCountryEntityByProvinceEntity(HistoryDtoRequest historyDto) {\r\n\r\n        /**<p>Traer el county desde su probincia</p>*/\r\n        ProvinceEntity province = provinceRepository.findByName(historyDto.province().toUpperCase());\r\n        if (province != null) return province;\r\n\r\n\r\n        /**<p>Si no existe entonces busco el pais </p>*/\r\n        String countryName = historyDto.country().toUpperCase();\r\n        CountryEntity country = countryRepository.findByName(countryName);\r\n\r\n            if (country == null) country = countryRepository.save(new CountryEntity(countryName));\r\n\r\n\r\n        /** <p>Guardo la ciudad</p> */\r\n        province = ProvinceEntity.builder().name(historyDto.province().toUpperCase()).country(country).build();\r\n        province = provinceRepository.save(province);\r\n\r\n\r\n        return province;\r\n    }\r\n\r\n    public List<HistoryEntity> getAll() {\r\n        return historyRepository.findAll();\r\n\r\n    }\r\n\r\n    public HistoryDtoResponse updateHistory(HistoryDtoRequestUpdate historyDto, @NotNull Long id) {\r\n        HistoryEntity history = historyRepository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"Entity not found\"));\r\n\r\n        if (historyDto.title() != null) history.setTitle(historyDto.title());\r\n        if (historyDto.img() != null) history.setImg(historyDto.img());\r\n        if (historyDto.synopsis() != null) history.setSyopsis(historyDto.synopsis());\r\n        if (historyDto.genre() != null) history.setGenre(historyDto.genre());\r\n\r\n        HistoryEntity historyDb = historyRepository.save(history);\r\n\r\n        return new HistoryDtoResponse(history);\r\n    }\r\n\r\n    public String deleteHistory(@NotNull Long id) {\r\n        HistoryEntity history = historyRepository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"Entity not found\"));\r\n        historyRepository.delete(history);\r\n        return \"Delete ok\";\r\n    }\r\n\r\n    public HistoryDtoResponse publishHistory(@NotNull Long id) {\r\n        HistoryEntity history = historyRepository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"Entity not found\"));\r\n        history.setPublish(true);\r\n        HistoryEntity historyDb = historyRepository.save(history);\r\n        return new HistoryDtoResponse(history);\r\n\r\n    }\r\n\r\n    public HistoryDtoResponse getHistory(@NotNull Long id) {\r\n        HistoryEntity history = historyRepository.findById(id).orElseThrow(() -> new EntityNotFoundException(\"Entity not found\"));\r\n\r\n        return new HistoryDtoResponse(history);\r\n\r\n    }\r\n\r\n    public List<HistoryDtoResponse> getHistoryByUserId(@NotNull Long userId) {\r\n        var user = userRepository.findById(userId);\r\n        List<HistoryEntity> history = historyRepository.findByCreator(user.get());\r\n        if(history.isEmpty()) return new ArrayList<>();\r\n        return history.stream().map(HistoryDtoResponse::new).toList();\r\n    }\r\n}\r\n",
              "ReaderService.java": "package com.Bookie.service;\r\n\r\nimport com.Bookie.config.repository.HistoryRepository;\r\nimport com.Bookie.config.repository.ReaderRepository;\r\nimport com.Bookie.config.repository.UserRepository;\r\nimport com.Bookie.dto.ReaderCreateRequest;\r\nimport com.Bookie.dto.ReaderRequest;\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.ReaderEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class ReaderService {\r\n\r\n    @Autowired\r\n    private ReaderRepository readerRepository;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private HistoryRepository historyRepository;\r\n\r\n    public ReaderRequest createReaer(ReaderCreateRequest readerCreateRequest) {\r\n\r\n        UserEntity user = userRepository.findById(readerCreateRequest.user_id()).orElseThrow(() -> new EntityNotFoundException(\"user not found\"));\r\n        HistoryEntity history = historyRepository.findById(readerCreateRequest.history_id()).orElseThrow(() -> new EntityNotFoundException(\"history not found\"));\r\n\r\n        //verificar si existe lo devuelva para no crearlo nuevamente\r\n        ReaderEntity reader = readerRepository.findByUserIdAndHistoryId(user, history);\r\n        if (reader != null) return new ReaderRequest(reader);\r\n\r\n        ReaderEntity readerDb = readerRepository.save(new ReaderEntity(user, history));\r\n        return new ReaderRequest(readerDb);\r\n    }\r\n}\r\n",
              "UserService.java": "package com.Bookie.service;\r\n\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.config.repository.UserRepository;\r\nimport jakarta.validation.constraints.NotNull;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\n\r\n@Service\r\npublic class UserService {\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    @Autowired\r\n    public UserService(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n\r\n    public void syncUser(OAuth2AuthenticationToken authentication) {\r\n        Map<String, Object> attributes = authentication.getPrincipal().getAttributes();\r\n        String auth0UserId = attributes.get(\"sub\").toString();\r\n        String email = attributes.get(\"email\").toString();\r\n        String name = attributes.get(\"name\").toString();\r\n\r\n        userRepository.findByEmail(email).ifPresentOrElse(\r\n                user -> {\r\n                    // Actualiza datos si es necesario\r\n                    user.setName(name);\r\n                    userRepository.save(user);\r\n                },\r\n                () -> {\r\n                    // Crea un nuevo usuario si no existe\r\n                    UserEntity newUser = new UserEntity();\r\n                    newUser.setAuth0UserId(auth0UserId);\r\n                    newUser.setEmail(email);\r\n                    newUser.setName(name);\r\n                    //newUser.setPassword(\"\"); // Opcional, ya que Auth0 maneja la autenticación\r\n                    userRepository.save(newUser);\r\n                }\r\n        );\r\n    }\r\n\r\n    public void saveUser(String auth0UserId, String email, String name) {\r\n        userRepository.findByEmail(email).ifPresentOrElse(\r\n                user -> {\r\n                    user.setName(name);\r\n                    userRepository.save(user);\r\n                },\r\n                () -> {\r\n                    UserEntity newUser = new UserEntity();\r\n                    newUser.setAuth0UserId(auth0UserId);\r\n                    newUser.setEmail(email);\r\n                    newUser.setName(name);\r\n                    userRepository.save(newUser);\r\n                }\r\n        );\r\n    }\r\n\r\n    // IMPORTANTE este metodo despues abria que borrarlo o hacerlo solo para admins\r\n    public List<UserEntity> getAllUsers() {\r\n        return userRepository.findAll();\r\n    }\r\n\r\n    public UserEntity getUserByAuth0Id(String auth0UserId) {\r\n        return userRepository.findByAuth0UserId(auth0UserId).orElse(null);\r\n    }\r\n\r\n    public List<HistoryEntity> getWishlist(@NotNull Long id) {\r\n        Optional<UserEntity> userDB = userRepository.findById(id);\r\n          return userDB.get().getWishlist();\r\n\r\n    }\r\n}\r\n",
              "WishlistService.java": "package com.Bookie.service;\r\n\r\nimport com.Bookie.config.repository.HistoryRepository;\r\nimport com.Bookie.config.repository.UserRepository;\r\nimport com.Bookie.config.repository.WishlistRepositoty;\r\nimport com.Bookie.dto.ReaderRequest;\r\nimport com.Bookie.dto.WishlistRequestCreate;\r\nimport com.Bookie.dto.WishlistResponseCreate;\r\nimport com.Bookie.entities.ReaderEntity;\r\nimport com.Bookie.entities.WishlistEntity;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class WishlistService {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private WishlistRepositoty wishlistRepositoty;\r\n\r\n    @Autowired\r\n    private HistoryRepository historyRepository;\r\n\r\n    public java.util.List<com.Bookie.entities.HistoryEntity> getWishlist(Long id) {\r\n       return userService.getWishlist(id);\r\n    }\r\n\r\n    public WishlistResponseCreate createHistory(WishlistRequestCreate wishlist) {\r\n\r\n\r\n\r\n        var user = userRepository.findById(wishlist.userID()).orElseThrow( ()-> new EntityNotFoundException(\"User not found\"));\r\n\r\n        var history =historyRepository.findById(wishlist.historyID()).orElseThrow( ()-> new EntityNotFoundException(\"History not found\"));\r\n\r\n\r\n\r\n        //verificar si ya existe\r\n        WishlistEntity wishlistDb = wishlistRepositoty.findByUserAndHistory(user, history);\r\n        if (wishlistDb != null) return new WishlistResponseCreate(wishlistDb);\r\n\r\n        WishlistEntity wishlistDB = new WishlistEntity();\r\n        wishlistDB.setHistory(history);\r\n        wishlistDB.setUser(user);\r\n\r\n         wishlistDB = wishlistRepositoty.save(wishlistDB);\r\n        return new WishlistResponseCreate(wishlistDB);\r\n    }\r\n\r\n    public void deleteWishlist(Long id) {\r\n        var whislint = wishlistRepositoty.findById(id).orElseThrow(()-> new EntityNotFoundException(\"whislist not found\"));\r\n        wishlistRepositoty.delete(whislint);\r\n    }\r\n}\r\n"
            },
            "testController": {
              "TestController.java": "package com.Bookie.testController;\r\n\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\n@RequestMapping(\"/api\")\r\npublic class TestController {\r\n\r\n    // Endpoint público (accesible sin autenticación)\r\n    @GetMapping(\"/public\")\r\n    public String publicEndpoint() {\r\n        return \"Este es un endpoint público y no requiere autenticación.\";\r\n    }\r\n\r\n    // Endpoint protegido (requiere autenticación)\r\n    @GetMapping(\"/protected\")\r\n    public String protectedEndpoint() {\r\n        return \"Este es un endpoint protegido y requiere autenticación.\";\r\n    }\r\n}"
            },
            "util": {
              "JsonUtil.java": "package com.Bookie.util;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.SerializationFeature;\r\n\r\n\r\npublic class JsonUtil {\r\n\r\n\r\n    public static void toJsonPrint(String title, Object object) throws JsonProcessingException {\r\n        final ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);\r\n        String formattedJson = objectMapper.writeValueAsString(object);\r\n        System.out.println(title + \" : \" + formattedJson);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n"
            }
          }
        }
      },
      "resources": {
        "application.properties": "spring.application.name=Bookie\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.config.import=optional:file:.env[.properties]\r\nspring.datasource.url=${SPRING_DATASOURCE_URL}\r\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\r\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\r\n\r\n#auth0.domain=dev-tqsnmrvr4avtmihp.us.auth0.com\r\n#auth0.clientId=qQwb64t3m9SYgRWQveFJdR3FpB1VMZUv\r\n#auth0.clientSecret=WJVZu-VdMsl0R0St6Cp4xOFZKrdzmhtJ_73JpvrJpIXUM8vT6WBMvrGZ_eCby1dS\r\n#auth0.audience=https://dev-tqsnmrvr4avtmihp.us.auth0.com/api/v2/\r\n\r\n# URL del dominio de Auth0\r\nspring.security.oauth2.client.provider.auth0.issuer-uri=https://dev-tqsnmrvr4avtmihp.us.auth0.com/\r\n\r\nspring.security.oauth2.client.registration.auth0.client-id=qQwb64t3m9SYgRWQveFJdR3FpB1VMZUv\r\nspring.security.oauth2.client.registration.auth0.client-secret=WJVZu-VdMsl0R0St6Cp4xOFZKrdzmhtJ_73JpvrJpIXUM8vT6WBMvrGZ_eCby1dS\r\nspring.security.oauth2.client.registration.auth0.scope=openid, profile, email\r\nspring.security.oauth2.client.registration.auth0.authorization-grant-type=authorization_code\r\nspring.security.oauth2.client.registration.auth0.redirect-uri-template={baseUrl}/login/oauth2/code/{registrationId}\r\nauth0.jwk-set-uri=https://dev-tqsnmrvr4avtmihp.us.auth0.com/.well-known/jwks.json\r\n\r\nserver.error.include-stacktrace=NEVER\r\nspring.output.ansi.enabled=always\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.format_sql=true\r\n\r\n\r\n#spring.datasource.url=jdbc:postgresql://ep-rapid-rice-a55hovst-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require\r\n#spring.datasource.username=neondb_owner\r\n#spring.datasource.password=lzcFEoXxM62H\r\n\r\n"
      }
    },
    "test": {
      "java": {
        "com": {
          "Bookie": {
            "BookieApplicationTests.java": "package com.Bookie;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\nclass BookieApplicationTests {\r\n\r\n\t@Test\r\n\tvoid contextLoads() {\r\n\t}\r\n\r\n}\r\n",
            "Controllers": {
              "ChapterControllerTest.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.ChapterDtoRequest;\r\nimport com.Bookie.dto.ChapterDtoResponse;\r\nimport com.Bookie.dto.WishlistResponseCreate;\r\nimport com.Bookie.util.JsonUtil;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport jakarta.validation.constraints.NotBlank;\r\nimport jakarta.validation.constraints.NotNull;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.web.client.TestRestTemplate;\r\nimport org.springframework.boot.test.web.server.LocalServerPort;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.http.*;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass ChapterControllerTest {\r\n\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    @Autowired\r\n    private RestTemplateBuilder restTemplateBuilder;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n\r\n    HttpHeaders headers;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        restTemplateBuilder = restTemplateBuilder.rootUri(\"http://localhost:\" + port);\r\n        testRestTemplate = new TestRestTemplate(restTemplateBuilder);\r\n        headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n\r\n\r\n    @Test\r\n    void createChapter() throws JsonProcessingException {\r\n        var chapter = new ChapterDtoRequest(\"capitulo \", \"En un bosque se encontraron dos personas \",\r\n                35.6037, 56.3816, 34L);\r\n\r\n        String json = \" { \\\"title\\\" : \\\"\" + chapter.title() + \"\\\" ,  \\\"content\\\" : \\\"\" + chapter.content() + \"\\\" ,  \\\"latitude\\\" : \"\r\n                + chapter.latitude() + \" ,  \\\"longitude\\\" : \" + chapter.longitude() + \" ,  \\\"historyId\\\" : \" + chapter.historyId() + \" } \";\r\n\r\n        JsonUtil.toJsonPrint(\"json \", json);\r\n\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(json, headers);\r\n        ResponseEntity<ChapterDtoResponse> result = testRestTemplate.exchange(\"/api/v1/chapters\", HttpMethod.POST, request, ChapterDtoResponse.class);\r\n        JsonUtil.toJsonPrint(\"WishlistResponseCreate \", result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(201, result.getStatusCode().value()),\r\n                () -> assertEquals(result.getBody().title(), chapter.title()),\r\n                () -> assertEquals(result.getBody().historyId(), chapter.historyId())\r\n        );\r\n    }\r\n\r\n\r\n    @Test\r\n    void getChaptersByHistory() {\r\n    }\r\n\r\n    @Test\r\n    void updateChapter() {\r\n    }\r\n\r\n    @Test\r\n    void deleteChapter() {\r\n    }\r\n}",
              "GenreControllerTest.java": "package com.Bookie.Controllers;\r\n\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.web.client.TestRestTemplate;\r\nimport org.springframework.boot.test.web.server.LocalServerPort;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.http.*;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass GenreControllerTest {\r\n\r\n\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    private HttpHeaders headers;\r\n\r\n\r\n\r\n    @Autowired\r\n    private RestTemplateBuilder restTemplateBuilder;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        restTemplateBuilder = restTemplateBuilder.rootUri(\"http://localhost:\" + port);\r\n        testRestTemplate = new TestRestTemplate(restTemplateBuilder);\r\n        headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n\r\n    }\r\n    @Test\r\n    void getAllgenre() {\r\n        HttpEntity<String> request = new HttpEntity<>(headers);\r\n\r\n        ResponseEntity<JsonNode> result = testRestTemplate.exchange(\"/api/v1/genre\", HttpMethod.GET, request, JsonNode.class);\r\n        System.out.println(\"List<GenreLiterary> : \" + result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, result.getStatusCode()),\r\n                () -> assertEquals(200, result.getStatusCode().value()),\r\n                () -> assertTrue(!result.getBody().isEmpty())\r\n        );\r\n    }\r\n\r\n}",
              "HistoryControllerTest.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.HistoryDtoRequest;\r\nimport com.Bookie.dto.HistoryDtoRequestUpdate;\r\nimport com.Bookie.dto.HistoryDtoResponse;\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport com.Bookie.util.JsonUtil;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.web.client.TestRestTemplate;\r\nimport org.springframework.boot.test.web.server.LocalServerPort;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.http.*;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass HistoryControllerTest {\r\n\r\n\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    private HttpHeaders headers;\r\n\r\n\r\n    @Autowired\r\n    private RestTemplateBuilder restTemplateBuilder;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        restTemplateBuilder = restTemplateBuilder.rootUri(\"http://localhost:\" + port);\r\n        testRestTemplate = new TestRestTemplate(restTemplateBuilder);\r\n        headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n\r\n    }\r\n\r\n    @Test\r\n    void getAllHistoties() {\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(headers);\r\n\r\n        ResponseEntity<JsonNode> result = testRestTemplate.exchange(\"/api/v1/history/all\", HttpMethod.GET, request, JsonNode.class);\r\n        System.out.println(\"getAllHistoties = \" + result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, result.getStatusCode()),\r\n                () -> assertEquals(200, result.getStatusCode().value()),\r\n                () -> assertTrue(!result.getBody().isEmpty())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void crateHistory() throws JsonProcessingException {\r\n\r\n        HistoryDtoRequest HistoryDtoRequest = new HistoryDtoRequest(\"La leyenda del MAGO 2\",\r\n                \"Una aventura épica sobre un MAGO y su MAGIA divivna.\", 2L, GenreLiterary.FANTASIA, \"http://imagen-del-dragon.jpg/\",\"ARGENTINA\",\"BUENOS AIRES\");\r\n\r\n        String json = \"\"\"\r\n                {\r\n                  \"title\": \"La leyenda del MAGO 2\",\r\n                  \"synopsis\": \"Una aventura épica sobre un MAGO y su MAGIA divivna.\",\r\n                  \"creator_id\": 3,\r\n                  \"genre\": \"FANTASIA\",\r\n                  \"img\": \"http://imagen-del-dragon.jpg/\",\r\n                  \"country\": \"san andres\",\r\n                  \"province\": \"isla\"\r\n                }\r\n                            \r\n                \"\"\";\r\n        HttpEntity<String> request = new HttpEntity<>(json, headers);\r\n        ResponseEntity<HistoryDtoResponse> crateHistoryResult = testRestTemplate.exchange(\"/api/v1/history\", HttpMethod.POST, request, HistoryDtoResponse.class);\r\n\r\n        System.out.println(\"HistoryDtoRequest = \" + json);\r\n        JsonUtil.toJsonPrint(\"crateHistoryResult\",crateHistoryResult);\r\n\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.CREATED, crateHistoryResult.getStatusCode()),\r\n                () -> assertEquals(201, crateHistoryResult.getStatusCode().value()),\r\n                () -> assertEquals(crateHistoryResult.getBody().title(), HistoryDtoRequest.title()),\r\n                () -> assertEquals(crateHistoryResult.getBody().genre(), HistoryDtoRequest.genre())\r\n        );\r\n    }\r\n\r\n\r\n    @Test\r\n    void updateHistory() {\r\n\r\n        HistoryDtoRequestUpdate HistoryDtoRequest = new HistoryDtoRequestUpdate(\"Historia del monte embrujado2\",\r\n                \"Encuantro sercano con almas en pena2\", GenreLiterary.NOVELA, \"http://portada2.jpg\");\r\n\r\n        String json = \"\"\"\r\n                {\r\n                 \"title\": \"Historia del monte embrujado2\",\r\n                    \"synopsis\": \"Encuantro cercano con almas en pena2\",\r\n                    \"genre\": \"NOVELA\",\r\n                    \"img\": \"http://portada2.jpg\"\r\n                }\r\n                            \r\n                \"\"\";\r\n        HttpEntity<String> request = new HttpEntity<>(json, headers);\r\n        ResponseEntity<HistoryDtoResponse> crateHistoryResult = testRestTemplate.exchange(\"/api/v1/history/28\", HttpMethod.PUT, request, HistoryDtoResponse.class);\r\n        System.out.println(\"updateHistory = \" + crateHistoryResult);\r\n        System.out.println(\"HistoryDtoRequest = \" + json);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, crateHistoryResult.getStatusCode()),\r\n                () -> assertEquals(200, crateHistoryResult.getStatusCode().value()),\r\n                () -> assertEquals(crateHistoryResult.getBody().title(), HistoryDtoRequest.title()),\r\n                () -> assertEquals(crateHistoryResult.getBody().genre(), HistoryDtoRequest.genre()),\r\n                () -> assertEquals(crateHistoryResult.getBody().id(), 28)\r\n        );\r\n    }\r\n\r\n\r\n    @Test\r\n    void deleteHistory() {\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(headers);\r\n        ResponseEntity<String> crateHistoryResult = testRestTemplate.exchange(\"/api/v1/history/28\", HttpMethod.DELETE, request, String.class);\r\n        System.out.println(\"updateHistory = \" + crateHistoryResult);\r\n\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.ACCEPTED, crateHistoryResult.getStatusCode()),\r\n                () -> assertEquals(202, crateHistoryResult.getStatusCode().value()),\r\n                () -> assertEquals(crateHistoryResult.getBody(), \"Delete ok\")\r\n\r\n        );\r\n    }\r\n\r\n\r\n    @Test\r\n    void gethHistoryByIdAndtheirChapters() throws JsonProcessingException {\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(headers);\r\n        ResponseEntity<HistoryDtoResponse> crateHistoryResult = testRestTemplate.exchange(\"/api/v1/history/74\", HttpMethod.GET, request, HistoryDtoResponse.class);\r\n        JsonUtil.toJsonPrint(\"crateHistoryResult = \" , crateHistoryResult);\r\n\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, crateHistoryResult.getStatusCode()),\r\n                () -> assertEquals(200, crateHistoryResult.getStatusCode().value()),\r\n                () -> assertEquals(crateHistoryResult.getBody().id(),74)\r\n\r\n        );\r\n    }\r\n\r\n\r\n    @Test\r\n    void gethHistoryByUserId() throws JsonProcessingException {\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(headers);\r\n        ResponseEntity<JsonNode> result = testRestTemplate.exchange(\"/api/v1/history/user/3\", HttpMethod.GET, request, JsonNode.class);\r\n\r\n        JsonUtil.toJsonPrint(\"List<history> historybyuser\",result);\r\n\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, result.getStatusCode()),\r\n                () -> assertEquals(200, result.getStatusCode().value()),\r\n                () -> assertTrue(!result.getBody().isEmpty())\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n}",
              "ReaderControllerTest.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.HistoryDtoRequest;\r\nimport com.Bookie.dto.HistoryDtoResponse;\r\nimport com.Bookie.dto.ReaderCreateRequest;\r\nimport com.Bookie.dto.ReaderRequest;\r\nimport com.Bookie.enums.GenreLiterary;\r\nimport com.Bookie.util.JsonUtil;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.web.client.TestRestTemplate;\r\nimport org.springframework.boot.test.web.server.LocalServerPort;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.http.*;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass ReaderControllerTest {\r\n\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    private HttpHeaders headers;\r\n\r\n\r\n    @Autowired\r\n    private RestTemplateBuilder restTemplateBuilder;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        restTemplateBuilder = restTemplateBuilder.rootUri(\"http://localhost:\" + port);\r\n        testRestTemplate = new TestRestTemplate(restTemplateBuilder);\r\n        headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n\r\n    }\r\n\r\n    @Test\r\n    void createReader() throws JsonProcessingException {\r\n\r\n        ReaderCreateRequest readerCreateRequest = new ReaderCreateRequest(1L, 34L);\r\n\r\n\r\n        String json = \" { \\\"user_id\\\" : \" + readerCreateRequest.user_id() + \", \\\"history_id\\\" : \" + readerCreateRequest.history_id() + \" }\";\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(json, headers);\r\n        ResponseEntity<ReaderRequest> crateHistoryResult = testRestTemplate.exchange(\"/api/vi/reader\", HttpMethod.POST, request, ReaderRequest.class);\r\n\r\n        System.out.println(\"HistoryDtoRequest = \" + json);\r\n        JsonUtil.toJsonPrint(\"crateHistoryResult\", crateHistoryResult);\r\n\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.CREATED, crateHistoryResult.getStatusCode()),\r\n                () -> assertEquals(201, crateHistoryResult.getStatusCode().value()),\r\n                () -> assertEquals(crateHistoryResult.getBody().user().getId(), readerCreateRequest.user_id()),\r\n                () -> assertEquals(crateHistoryResult.getBody().history().getId(), readerCreateRequest.history_id())\r\n        );\r\n    }\r\n}\r\n",
              "WishlistControllerTest.java": "package com.Bookie.Controllers;\r\n\r\nimport com.Bookie.dto.WishlistResponseCreate;\r\nimport com.Bookie.entities.HistoryEntity;\r\nimport com.Bookie.util.JsonUtil;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.web.client.TestRestTemplate;\r\nimport org.springframework.boot.test.web.server.LocalServerPort;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.core.ParameterizedTypeReference;\r\nimport org.springframework.http.*;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass WishlistControllerTest {\r\n\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    @Autowired\r\n    private RestTemplateBuilder restTemplateBuilder;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n\r\n    HttpHeaders headers;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        restTemplateBuilder = restTemplateBuilder.rootUri(\"http://localhost:\" + port);\r\n        testRestTemplate = new TestRestTemplate(restTemplateBuilder);\r\n        headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n\r\n\r\n    @Test\r\n    void crateWishlist() throws JsonProcessingException {\r\n        Long userId = 1L;\r\n        Long historyID = 35L;\r\n\r\n        String json = \" { \\\"userID\\\" : \"+ userId +\" ,  \\\"historyID\\\" : \"+ historyID +\" } \";\r\n\r\n        JsonUtil.toJsonPrint(\"json \" , json);\r\n\r\n\r\n        HttpEntity<String> request = new HttpEntity<>(json, headers);\r\n        ResponseEntity<WishlistResponseCreate> result = testRestTemplate.exchange(\"/api/v1/wishlist\", HttpMethod.POST, request, WishlistResponseCreate.class);\r\n        JsonUtil.toJsonPrint(\"WishlistResponseCreate \" , result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.CREATED, result.getStatusCode()),\r\n                () -> assertEquals(201, result.getStatusCode().value()),\r\n                () -> assertEquals(result.getBody().userID().getId(), userId),\r\n                () -> assertEquals(result.getBody().historyID().getId(), historyID)\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void getWishlist() throws JsonProcessingException {\r\n\r\n\r\n        HttpEntity<String> request = new HttpEntity<>( headers);\r\n        ResponseEntity<List<HistoryEntity>> result = testRestTemplate.exchange(\"/api/v1/wishlist/1\", HttpMethod.GET, request, new ParameterizedTypeReference<List<HistoryEntity>>() {});\r\n        JsonUtil.toJsonPrint(\"List<HistotyEntity> = \" , result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, result.getStatusCode()),\r\n                () -> assertEquals(200, result.getStatusCode().value()),\r\n                () -> assertTrue(!result.getBody().isEmpty())\r\n\r\n        );\r\n    }\r\n\r\n\r\n    @Test\r\n    void deleteHistoryWishlist() throws JsonProcessingException {\r\n\r\n\r\n        HttpEntity<String> request = new HttpEntity<>( headers);\r\n        ResponseEntity<JsonNode> result = testRestTemplate.exchange(\"/api/v1/wishlist/22\", HttpMethod.DELETE, request, JsonNode.class);\r\n        JsonUtil.toJsonPrint(\"List<HistotyEntity> = \" , result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.ACCEPTED, result.getStatusCode()),\r\n                () -> assertEquals(202, result.getStatusCode().value())\r\n\r\n\r\n        );\r\n    }\r\n\r\n\r\n}"
            },
            "UserTest.java": "package com.Bookie;\r\n\r\nimport com.Bookie.config.repository.UserRepository;\r\nimport com.Bookie.entities.UserEntity;\r\nimport com.Bookie.util.JsonUtil;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.SerializationFeature;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Disabled;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.web.client.TestRestTemplate;\r\nimport org.springframework.boot.test.web.server.LocalServerPort;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.http.*;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\npublic class UserTest {\r\n\r\n    @Autowired\r\n    private UserRepository UserRepository;\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    @Autowired\r\n    private RestTemplateBuilder restTemplateBuilder;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    private  ObjectMapper mapper;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        restTemplateBuilder = restTemplateBuilder.rootUri(\"http://localhost:\" + port);\r\n        testRestTemplate = new TestRestTemplate(restTemplateBuilder);\r\n        mapper = new ObjectMapper();\r\n        mapper.enable(SerializationFeature.INDENT_OUTPUT);\r\n    }\r\n\r\n    @Test\r\n    void createUser() {\r\n        HttpHeaders headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n\r\n\r\n        String json = \"\"\"\r\n                {\r\n                  \"name\":\"Dario\",\r\n                    \r\n                         \"user_id\": \"326Dario\",\r\n                      \r\n                         \"email\": \"Dario@gmail.com\"\r\n                    \r\n                }\r\n                \"\"\";\r\n        HttpEntity<String> request = new HttpEntity<>(json,headers);\r\n        ResponseEntity<String> result = testRestTemplate.exchange(\"/api/webhooks/auth0/user-created\", HttpMethod.POST, request, String.class);\r\n        System.out.println(\"result = \" + result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, result.getStatusCode()),\r\n                () -> assertEquals(200, result.getStatusCode().value()),\r\n                () -> assertEquals(result.getBody(),\"User synchronized successfully.\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * http://deploy-bookie-production.up.railway.app/api/webhooks/auth0/user-created\r\n     * deploy\r\n     */\r\n    @Test\r\n    @Disabled(\"solo para el crear ususarios en el deploy\")\r\n    void createUserDeploy() {\r\n        HttpHeaders headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n\r\n\r\n        String json = \"\"\"\r\n                {\r\n                  \"name\":\"Dario\",\r\n                    \r\n                         \"user_id\": \"326Dario\",\r\n                      \r\n                         \"email\": \"Dario@gmail.com\"\r\n                    \r\n                }\r\n                \"\"\";\r\n        HttpEntity<String> request = new HttpEntity<>(json,headers);\r\n        ResponseEntity<String> result = testRestTemplate.exchange(\"http://deploy-bookie-production.up.railway.app/api/webhooks/auth0/user-created\", HttpMethod.POST, request, String.class);\r\n        System.out.println(\"result = \" + result);\r\n\r\n        assertAll(\r\n                () -> assertEquals(HttpStatus.OK, result.getStatusCode()),\r\n                () -> assertEquals(200, result.getStatusCode().value()),\r\n                () -> assertEquals(result.getBody(),\"User synchronized successfully.\")\r\n        );\r\n    }\r\n\r\n    \r\n    @Test\r\n    @Transactional\r\n    void allUser() throws JsonProcessingException {\r\n   List<UserEntity> users = UserRepository.findAll();\r\n\r\n   //mapeando arreglo a json\r\n\r\n         String json = mapper.writeValueAsString(users);\r\n         System.out.println(json);\r\n\r\n        assertNotEquals(users.isEmpty(),null);\r\n    }\r\n\r\n\r\n\r\n}\r\n"
          }
        }
      }
    }
  }
}